; eww config

; ━━━━ windows ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╸

(defwindow win0 :monitor 0
               :geometry (geometry :x 0 :y 0 :height "15px" :width "100%" :anchor "center top")
               :stacking "fg" 
               :exclusive true
               :focusable false
  (bar0 :monitor "eDP-1"))

(defwindow win1 :monitor 1
               :geometry (geometry :x 0 :y 0 :height "15px" :width "100.01%" :anchor "center top")
               :stacking "fg" 
               :exclusive true
               :focusable false
  (bar0 :monitor "HDMI-A-1"))

(defwindow win2 :monitor 2
               :geometry (geometry :x 0 :y 0 :height "15px" :width "100.01%" :anchor "center top")
               :stacking "fg" 
               :exclusive true
               :focusable false
  (bar0 :monitor "DP-2"))

(defwindow win3 :monitor 1
               :geometry (geometry :x 0 :y 0 :height "15px" :width "100.01%" :anchor "center top")
               :stacking "fg" 
               :exclusive true
               :focusable false
  (bar0 :monitor "DP-2"))

; ━━━━ bars ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╸

(defwidget bar0 [monitor] 
  (box :orientation "h"
       :space-evenly true
       :class "bar"
    (box :class "left"
         :halign "start"
         :space-evenly false
         :spacing 15
      ;(workspaces :monitor monitor)
      (player))
    ;(box :class "center"
    ;     :halign "center"
    ;     :spacing 15
    ;  (player))
    (box :class "right"
         :halign "end"
         :spacing 15
         :space-evenly false
      (tray)
      (bluetooth)
      ;(wifi)
      (camera)
      (mic)
      (speakers)
      (battery)
      (time)
      (date))))

; ━━━━ bluetooth ╺━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╸

; Only show if: 
;   - player is chromium and status == Playing 
;   - at least one other player is running
;   - if response is "No players found", dont show

(deflisten player :initial '{"status": "No players found", "title": "Song Name and Artist"}' "./modules/player.sh")

(defwidget player []
  (tooltip
    (label :class "tooltip" :text "${player.title}")
    (box :class "player" 
      :visible "${player.status != 'No players found'}"
      :space-evenly false
      (eventbox :cursor "pointer"
      (button :onclick "playerctl previous"
        (label :class "icon prev" :text "󰒮")))
      (eventbox :cursor "pointer"
      (button :onclick "playerctl play-pause"
        (label :class "icon ${player.status == "Paused" ? 'play' : 'pause'}" :text "${player.status == "Paused" ? '󰐊' : '󰏤'}")))
      (eventbox :cursor "pointer"
      (button :onclick "playerctl next"
        (label :class "icon next" :text "󰒭"))))))

; ━━━━ workspaces ╺━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╸

(deflisten workspaces :initial '{"DP-2": [], "HDMI-A-1": [], "eDP-1": []}' "./modules/sway-workspaces.py")

(defwidget workspaces [monitor]
  (box :orientation "h" :class "workspaces"
                :space-evenly false
    (for wsp in {workspaces[monitor]}
      (eventbox :cursor "pointer"
      (button :class "workspace ${wsp.class}"
              :onclick "swaymsg workspace ${wsp.name}"
        (box
          (label :class "icon" :text "${wsp.icon}")
          (label :class "text name" :text "${wsp.name}")))))))
        ;{wsp.name}))))

; ━━━━ tray ╺━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╸

(defwidget tray []
  (box :class "tray"
    (systray)))

; ━━━━ camera ╺━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╸

(defpoll camera :initial "0" :interval "10s" "./modules/camera.sh")

(defwidget camera []
  (box :class "camera"
    :space-evenly false
    (label :class "icon ${camera == 0 ? 'disconnected' : 'connected'}"
         :text "${camera == 0 ? '󱜷' : '󰖠'}")))

; ━━━━ bluetooth ╺━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╸

(defpoll bluetooth :initial '{"connected": false, "devices": ""}' :interval "20s" "./modules/bluetooth.sh")

(defwidget bluetooth []
  (tooltip
    (label :class "tooltip" :text "${bluetooth.connected == false ? 'Disconnected' : bluetooth.devices }")
    (box :class "bluetooth"
      :space-evenly false
      (label 
        :class "icon ${bluetooth.connected == false ? 'disconnected' : 'connected'} " 
        :text "${bluetooth.connected == false ? '󰂲' : '󰂰' }"))))

; ━━━━ wifi ╺━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╸

(defpoll wifi :initial "0" :interval "1m" "./modules/wifi.sh")

(defwidget wifi []
  (tooltip
    (label :class "tooltip" :text "${wifi == 0 ? 'Disconnected' : wifi}")
    (box :class "wifi"
      :space-evenly false
      (label 
        :class "icon ${wifi == 0 ? 'disconnected' : 'connected'} " 
        :text "${wifi == 0 ? '󰖪' : '󱚽' }"))))


; ━━━━ mic ╺━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╸

(deflisten mic :initial 0  "./modules/listen-mic.sh")

(defwidget mic []
  (box :class "mic"
    :space-evenly false
    (eventbox :cursor "pointer"
      (button :class "mute-toggle"
              :onclick "pactl set-source-mute @DEFAULT_SOURCE@ toggle"
        (label :class "icon single-icon ${mic == 2 ? 'running' : mic == 0 ? 'muted' : ''}"
               :text "${mic == 0 ? '󰍭' :  '󰍬' }")))))

; ━━━━ volume ╺━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╸

(deflisten speakers :initial '{ "volume": 0, "muted": "false" }' "./modules/listen-volume.sh")

(defwidget speakers []
  (tooltip 
    (label :class "tooltip" :text "${ speakers.volume }%")
    (box :class "speakers"
      :space-evenly false
      (button :class "icon ${ speakers.volume > 100 ? 'over' : '' } ${ speakers.muted ? 'muted' : '' }"
        :onclick "pactl set-sink-mute @DEFAULT_SINK@ toggle"  
        (label :text "${ speakers.muted ? '󰖁' : 
                        speakers.volume > 70 ? '󰕾' : 
                        speakers.volume > 35 ? '󰖀' : 
                        '󰕿' }"))

    (eventbox :cursor "pointer"
    (scale 
      :class "${ speakers.volume > 100 ? 'over' : '' }"
      :min 0  
      :max 100 
      :value "${speakers.volume}" 
      :onchange "pactl set-sink-volume @DEFAULT_SINK@ {}%")))))

; ━━━━ battery ╺━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╸

(defwidget battery []
  (tooltip
    (label :class "tooltip" :text "${EWW_BATTERY["BAT0"].capacity}%")
  (box :class "battery"
    :space-evenly false
    (label :class "icon icon1 ${  EWW_BATTERY["BAT0"].status == 'Charging' ? 'charging' 
                     : EWW_BATTERY["BAT0"].status == 'Discharging' ? 'discharging' 
                     : 'full'}"
           :text "${  EWW_BATTERY["BAT0"].status == 'Charging' ? '󰁝' 
                    : EWW_BATTERY["BAT0"].status == 'Discharging' ? '󰁅' 
                    : ''}")
    (label :class "icon icon2 level_${ round(EWW_BATTERY["BAT0"].capacity / 10, 0)}"
           :text "${  EWW_BATTERY["BAT0"].capacity > 95 ? '󰁹' 
                    : EWW_BATTERY["BAT0"].capacity > 90 ? '󰂂' 
                    : EWW_BATTERY["BAT0"].capacity > 80 ? '󰂁' 
                    : EWW_BATTERY["BAT0"].capacity > 70 ? '󰂀' 
                    : EWW_BATTERY["BAT0"].capacity > 60 ? '󰁿' 
                    : EWW_BATTERY["BAT0"].capacity > 50 ? '󰁾' 
                    : EWW_BATTERY["BAT0"].capacity > 40 ? '󰁽' 
                    : EWW_BATTERY["BAT0"].capacity > 30 ? '󰁼' 
                    : EWW_BATTERY["BAT0"].capacity > 20 ? '󰁻' 
                    : EWW_BATTERY["BAT0"].capacity > 10 ? '󰁺' 
                    : '󰂃' }"))))
    ;(label :text "${EWW_BATTERY["BAT0"].capacity}%" :halign "center" :xalign 0.5 :justify "right")))

; ━━━━ date ╺━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╸

(defpoll date_poll :interval "1m" "date +%d/%m")

(defwidget date []
  (box :class "date"
    :space-evenly false
    (label :class "icon" :text "󰃶")
    (label :class "text" :text "${date_poll}")))

; ━━━━ time ╺━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╸

(defpoll time_poll :interval "1s" "date +%H:%M")

(defwidget time []
  (box :class "time"
    :space-evenly false
    (label :class "icon" :text "󰥔")
    (label :class "text" :text time_poll)))

