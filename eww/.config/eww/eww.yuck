; TODO: Make modules disappear when script output is empty, check if the children is empty?
; TODO: Make modules be able to change the icon (json?)
; TODO: Add "echo """ to the begining of scripts (just in case for :visible reasons)
; TODO: set max length for player and notifications so that it doesnt move other widgets


; do I just do this, github poll being a json? - but then that requires all modules being scripted. - but then that requires all modules being scripted, including eww_bars
;; well no, I could use :visible with the output of the script, but then we run into default values problems? or do we?
; (defwidget github []
;   (icon-module :class "github" :icon "" :text github_poll) 

; muted ? "no spek" : '["quiet", "loud", "bruh"]'[round(volume / something, 0)]

; Windows foldstart
(defwindow bar0
  :monitor 0
  :hexpand false
  :vexpand false
  :geometry (geometry :anchor "top left" :x 0 :y 0 :width "100%" :height "20px")
  :reserve (struts :distance "20px" :side "top")
  (bar0))

(defwindow bar1
  :monitor 1
  :hexpand false
  :vexpand false
  :geometry (geometry :anchor "top left" :x 0 :y 0 :width "100%" :height "20px")
  :reserve (struts :distance "20px" :side "top")
  (bar1))

(defwindow clock
  :monitor 1
  :hexpand false
  :vexpand false
  :geometry (geometry :anchor "bottom right" :x 0 :y 0 :width "100%" :height "200px")
  :reserve (struts :distance "200px" :side "bottom")
  (clock))

(defwindow test
  :monitor 1
  :hexpand true
  :vexpand true
  :geometry (geometry :anchor "top left" :x 200 :y 0 :width "200px" :height "200px")
  (test))
; foldend


; Bar foldstart
(defwidget bar0 []
  (box :orientation "h"
       :space-evenly false
       :class "bar"
    (box :halign "start"
         :space-evenly false
      (workspaces0)
      (player))
    (box :halign "end"
         :spacing 12
         :hexpand true
         :space-evenly false
      (notifications)
      (github)
      (updates)
      (trash)
      (noisetorch)
      (microphone)
      (speaker)
      (ping)
      (network)
      (disk)
      (ram)
      (nvidia)
      (cpu)
      (date)
      (time))))

(defwidget bar1 []
  (box :orientation "h"
       :space-evenly false
       :class "bar"
    (box :halign "start"
         :space-evenly false
      (workspaces1))
    (box :halign "end"
         :spacing 12
         :hexpand true
         :space-evenly false)))

; foldend

; Variables foldstart
(defpoll time_poll :interval "1s" "date +%H:%M")
(defpoll date_poll :interval "1m" "date +%d/%m/%Y")
(defpoll trash_poll :interval "10s" "./modules/trash.sh")
(defpoll noisetorch_poll :initial "" :interval "10s" "./modules/noisetorch.sh")
(defpoll updates_poll :initial "" :interval "1m" "./modules/updates.sh &") 
(defpoll github_poll :initial "" :interval "1m" "./modules/github.sh")
(defpoll ping_poll :interval "10s" "./modules/ping.sh")

(deflisten remaining_listen :initial "" "remaining-time")
(deflisten workspaces0_listen "./modules/workspaces.sh HDMI-0")
(deflisten workspaces1_listen "./modules/workspaces.sh HDMI-1")
(deflisten player_listen :initial '{"show": "no", "content": ""}' "./modules/player.sh")
(deflisten nvidia_listen "./modules/nvidia.sh")
(deflisten notifications_listen :initial '{"show": "no", "content": ""}' "./modules/notifications.sh")

; Make this cleaner at some point
(defpoll microphone_poll :initial "{}" :interval "999h" "./modules/microphone.sh")
(defpoll speaker_poll :initial "{}" :interval "999h" "./modules/speaker.sh")
; foldend

; Modules foldstart
; Generic icon module foldstart
(defwidget icon-module [icon ?class ?visible]
  (box :class "${class} icon-module"
       :orientation "h"
       :halign "end"
       :space-evenly false
       :visible {visible ?: true} ; because the argument is optional
    (label :class "icon-module__icon" :text "${icon}")
    (children)))
; foldend

; Polybar-Style modules foldstart
(defwidget workspaces0 []
  (literal :content workspaces0_listen))

(defwidget workspaces1 []
  (literal :content workspaces1_listen))

(defwidget player []
  (icon-module :class "player" :icon "" :visible {player_listen.show == "yes"}
    (literal :content {player_listen.content})))

(defwidget ram []
  (icon-module :class "ram" :icon "" :visible {EWW_RAM.used_mem_perc != ""}
    (label :text "${round(EWW_RAM.used_mem_perc, 0)}%")))

(defwidget notifications []
  (icon-module :class "notifications" :icon "" :visible {notifications_listen.show == "yes"}
    (literal :content {notifications_listen.content}))) 

(defwidget date []
  (icon-module :class "date" :icon "" 
    (label :text date_poll)))

(defwidget time []
  (icon-module :class "time" :icon "" 
    (label :text time_poll))) 

(defwidget nvidia []
  (icon-module :class "nvidia" :icon "" 
    (label :text nvidia_listen))) 

(defwidget cpu []
  (icon-module :class "cpu" :icon "" 
    (label :text "${round(EWW_CPU.avg, 0)}%"))) 

(defwidget disk []
  (icon-module :class "disk" :icon "" 
    (label :text "${round(EWW_DISK["/"].used_perc, 0)}%"))) 

(defwidget trash []
  (icon-module :class "trash" :icon "" 
    (label :text trash_poll))) 

(defwidget noisetorch []
  (icon-module :class "noisetorch" :icon "" 
    (label :text noisetorch_poll))) 

(defwidget updates []
  (icon-module :class "updates" :icon "" :visible {updates_poll != ""}
    (label :text updates_poll))) 

(defwidget github []
  (icon-module :class "github" :icon "" :visible {github_poll != ""}
    (label :text github_poll))) 

(defwidget ping []
  (icon-module :class "ping" :icon ""
    (label :text ping_poll))) 

(defwidget network []
  (icon-module :class "network" :icon ""
    (label :text "${round(EWW_NET.enp42s0.NET_UP / 1000000, 2)}/${round(EWW_NET.enp42s0.NET_DOWN / 1000000, 2)}"))) 

(defwidget speaker []
  (icon-module :class "speaker" 
               :icon {speaker_poll.icon}
    (eventbox :onscroll `eww update speaker_poll="$(./modules/speaker.sh {})"`
      (button :onclick `eww update speaker_poll="$(./modules/speaker.sh toogle)"`
        (label :text {speaker_poll.content})))))

(defwidget microphone []
  (icon-module :class "microphone" 
               :icon {microphone_poll.icon}
    (eventbox :onscroll `eww update microphone_poll="$(./modules/microphone.sh {})"`
      (button :onclick `eww update microphone_poll="$(./modules/microphone.sh toogle)"`
        (label :text {microphone_poll.content})))))
; foldend

; foldend

; Clock foldstart 
(defwidget clock []
  (box :orientation "v"
       :space-evenly false
       :class "clock"

    (label :class "title" :text "Remaining time today") 
    (label :vexpand true :class "remaining_time" :text remaining_listen)))
; foldend

; Clock test 
(defwidget test []
  (box :orientation "h"
       :space-evenly false
    (label 
      :halign "after"
      :valign "after"
      :text "Remaining time today") 
    (label 
      :halign "after"
      :valign "after"
      :text "ASd")))
; foldend



; vim:foldmarker=foldstart,foldend
